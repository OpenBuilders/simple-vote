#include "imports/stdlib.fc";
#include "imports/constants_vote.fc";
#include "imports/utils_vote.fc";

const int const::min_for_storage = 30000000;

;; storage
global slice ctx_owner_addr;
global slice ctx_main_addr;
global int ctx_vote;

() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_owner_addr = ds~load_msg_addr();
    ctx_main_addr = ds~load_msg_addr();
    ctx_vote = ds~load_int(3);
}

() save_data() impure {
    set_data(pack_data(ctx_owner_addr, ctx_main_addr, ctx_vote));
}

() change_my_vote_msg(int msg_value, int prev_vote) impure {
    var body = begin_cell()
            .store_uint(op::change_vote, 32)
            .store_slice(ctx_owner_addr)
            .store_int(prev_vote, 3)
            .store_int(ctx_vote, 3)
        .end_cell();

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(ctx_main_addr)
            .store_coins(msg_value)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(body)
            .end_cell();

    send_raw_message(msg, 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }

    load_data();
    slice from_addr = cs~load_msg_addr();

    ;; init action
    if (equal_slices(ctx_main_addr, from_addr)) {
        if (ctx_vote == const::vote:nothing) {
            ctx_vote = in_msg_body~load_int(3);
            save_data();
            return ();
        } else {
            throw(error::already_voted);
        }
    }

    if (msg_value < const::min_for_storage) {
        throw(error::not_enough_funds);
    }

    ;; actiion for change vote from User
    if (equal_slices(ctx_owner_addr, from_addr)) {
        int op = in_msg_body~load_uint(32);
        if (op == 0) {
            int prev_vote = ctx_vote;
            ctx_vote = parse_yes_or_not_msg(in_msg_body);
            save_data();

            if (ctx_vote != prev_vote) {
                change_my_vote_msg(msg_value, prev_vote);
            }

            return ();
        }
    }

    throw(error:unknown_op);
}

(int) get_my_vote() method_id {
    load_data();
    return ctx_vote;
}

;; get main addr
(slice) get_main_addr() method_id {
    load_data();
    return ctx_main_addr;
}
